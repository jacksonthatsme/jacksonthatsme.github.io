
// Mixins
// ------------------------------------------------------------------


// Clearfix
@mixin cf {
  *zoom: 1;
  &:before,
  &:after { content: " "; display: table; }
  &:after { clear: both; }
}


// ------------------------------------------------------------------
// Functions
// ------------------------------------------------------------------

// General Use Functions
// ------------------------------------------------------------------

@function map-deep-get($map, $keys...) {
  $value: $map;
  @each $key in $keys {
    $value: map-get($value, $key);
  }
  @return $value;
}

@function bp-value($breakpoint, $param){
  @return map-deep-get($vo-grid, breakpoints, $breakpoint, $param)
};

@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    }

    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}


// ------------------------------------------------------------------
// VARIABLES: Grid
// ------------------------------------------------------------------

$vo-grid: (
  general: (
    max-width: 1366px,
    columns: 24
  ),
  suffixes:(xs, sm, md, lg),
  breakpoints: (
    xs: (
      gutter: 12px,
      outer: 24px,
      breakpoint: 599px,
    ),
    sm: (
      gutter: 24px,
      outer: 24px,
      breakpoint: 600px,
    ),
    md: (
      gutter: 30px,
      outer: 70px,
      breakpoint: 900px,
    ),
    lg: (
      gutter: 30px,
      outer: 100px,
      breakpoint: 1250px,
    )
  )
);



// Functions and variables
// ------------------------------------------------------------------

// List containing all media query suffixes (e.g. sm, md, lg)
$suffix-list: map-deep-get($vo-grid, suffixes);
// xs, sm, md, lg

// Variable containing the first suffix in our list
// This is used in cases where we want to set base sizes outside
// of a media query or a loop through our breakpoints
$suffix-first: nth(map-deep-get($vo-grid, suffixes),1);
// xs

// The list of suffixes used for breakpoint based versions of classes
$bp-suffixes: remove($suffix-list, $suffix-first);
// sm, md, lg

$max-width: map-deep-get($vo-grid, general, max-width);
$cols: map-deep-get($vo-grid, general, columns);

$bp-xsmall: bp-value(xs, breakpoint);
$bp-small: bp-value(sm, breakpoint);
$bp-medium: bp-value(md, breakpoint);
$bp-large: bp-value(lg, breakpoint);

// ------------------------------------------------------------------
// VARIABLES: Media Queries
// ------------------------------------------------------------------
//
// Uses breakpoint variables generated in variables/grid
//
// Usage eg: @media #{$screen-sm} { some stuff }
//
// ------------------------------------------------------------------

// Extra small screens only
$screen-xs: "(max-width:" + $bp-xsmall + ")";

// Small screens only
$screen-sm: "(min-width:" + $bp-small +") and (max-width:" + ($bp-medium -1) ")";

// All screens from the small breakpoint and up
$screen-sm-and-up: "(min-width:" + $bp-small + ")";

// Medium screens only
$screen-md: "(min-width:" + $bp-medium +") and (max-width:" + ($bp-large -1) ")";

// All screens from the medium breakpoint and up
$screen-md-and-up: "(min-width:" + $bp-medium + ")";

// Large screens only
$screen-lg: "(min-width:" + $bp-large + ")";

// ------------------------------------------------------------------
// UTILITIES: Grid
// ------------------------------------------------------------------


// Grid Column Mixin
// ------------------------------------------------------------------

@mixin grid-cols($bp-label:null) {
  @if $bp-label == null {
    @for $i from 1 through $cols {
      @for $b from 1 through $cols {
        @if $i < $b {
          .col-#{$i}-#{$b} {
            width: calc(#{$i}/#{$b} * 100%)!important;
          }
        }
      }
    }

  } @else {

    @for $i from 1 through $cols {
      @for $b from 1 through $cols {
        @if $i < $b {
          .col-#{$bp-label}-#{$i}-#{$b} {
            width: calc(#{$i}/#{$b} * 100%)!important;
          }
        }
      }
    }
  }
}

// Grid container
// ------------------------------------------------------------------

.grid-container {
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;

  padding-left: bp-value($suffix-first, outer);
  padding-right: bp-value($suffix-first, outer);

  box-sizing: border-box;
  * { box-sizing: inherit }

  @each $breakpoint in $bp-suffixes {
    @media (min-width: bp-value($breakpoint, breakpoint)) {
      padding-left: bp-value($breakpoint, outer);
      padding-right: bp-value($breakpoint, outer);
    }
  }
}

.grid-container-full-xs {
  // This is to be used as an add-on to .grid-container to
  // achieve edge-to-edge on small screens

  max-width: none;
  padding-left: 0;
  padding-right: 0;

  @each $breakpoint in $bp-suffixes {
    @media (min-width: bp-value($breakpoint, breakpoint)) {
      padding-left: bp-value($breakpoint, outer);
      padding-right: bp-value($breakpoint, outer);
    }
  }
}

// Column stacking
// ------------------------------------------------------------------
// Grid columns with size classes should default to
// stacking outside their respective media queries

[class*='col-sm-'],
[class*='col-md-'],
[class*='col-lg-'] {
  width: 100%!important;
}



// General Column Styles
// ------------------------------------------------------------------
// Needs a temporary wrapper to keep it from affecting the old grid

.grid-container {
  [class*='col-'] {
    vertical-align: top;
    float: left;
    position: relative;

    padding-left: bp-value($suffix-first, gutter) / 2;
    padding-right: bp-value($suffix-first, gutter) / 2;

    @each $breakpoint in $bp-suffixes {
      @media (min-width: bp-value($breakpoint, breakpoint)) {
        padding-left: bp-value($breakpoint, gutter) / 2;
        padding-right: bp-value($breakpoint, gutter) / 2;
      }
    }
  }
}


// Offsets
// ------------------------------------------------------------------

@for $i from 1 through $cols {
  @for $b from 1 through $cols {
    @if $i < $b {
      .col-offset-#{$i}-#{$b} {
        margin-left: calc(#{$i}/#{$b} * 100%)!important;
      }
    }
  }
}

@each $breakpoint in $bp-suffixes {
  @media (min-width: bp-value($breakpoint, breakpoint)) {
    @for $i from 1 through $cols {
      @for $b from 1 through $cols {
        @if $i < $b {
          .col-offset-#{$breakpoint}-#{$i}-#{$b} {
            margin-left: calc(#{$i}/#{$b} * 100%)!important;
          }

          // Offset reset lets us limit offsets to a single screen size
          .col-offset-#{$breakpoint}-0-#{$b} {
            margin-left: 0!important;
          }
        }
      }
    }
  }
}


// Centered Columns
// ------------------------------------------------------------------

.col-center {
  margin-left: auto!important;
  margin-right: auto!important;
  float: none!important;
}

.col-right {
  float: right!important
}

@media #{$screen-xs} {
  .col-xs-center {
    margin-left: auto!important;
    margin-right: auto!important;
    float: none!important;
  }

  .col-xs-left {
    float: left!important;
  }

  .col-xs-right {
    float: right!important
  }

}

@media #{$screen-sm-and-up} {
  .col-sm-center {
    margin-left: auto!important;
    margin-right: auto!important;
    float: none!important;
  }

  .col-sm-left {
    float: left!important;
  }

  .col-sm-right {
    float: right!important
  }

}

@media #{$screen-md-and-up} {
  .col-md-center {
    margin-left: auto!important;
    margin-right: auto!important;
    float: none!important;
  }

  .col-md-left {
    float: left!important;
  }

  .col-md-right {
    float: right!important
  }
}

@media #{$screen-lg} {
  .col-lg-center {
    margin-left: auto!important;
    margin-right: auto!important;
    float: none!important;
  }

  .col-lg-left {
    float: left!important;
  }

  .col-lg-right {
    float: right!important
  }
}



// Grid Rows
// ------------------------------------------------------------------

.grid-row {
  @include cf;

  margin-left: -(bp-value($suffix-first, gutter)/2);
  margin-right: -(bp-value($suffix-first, gutter)/2);

  @each $breakpoint in $bp-suffixes {
    @media (min-width: bp-value($breakpoint, breakpoint)) {
      margin-left: -(bp-value($breakpoint, gutter)/2);
      margin-right: -(bp-value($breakpoint, gutter)/2);
    }
  }
}



// Full Width Grid
// ------------------------------------------------------------------

.grid-full-width-xs {
  @media (max-width: bp-value($suffix-first, breakpoint)) {
    margin-left: -(bp-value($suffix-first, outer));
    margin-right: -(bp-value($suffix-first, outer));
    width: auto!important;
  }
}

.grid-full-width {
  margin-left: -(#{bp-value($suffix-first, outer)});
  margin-right: -(#{bp-value($suffix-first, outer)});

  @each $breakpoint in $bp-suffixes {
    @media (min-width: bp-value($breakpoint, breakpoint)) {
      margin-left: -(#{bp-value($breakpoint, outer)});
      margin-right: -(#{bp-value($breakpoint, outer)});
    }
  }
}

[class*='grid-full-width-'] {
  > .grid-row {
    margin-left: 0;
    margin-right: 0;
  }
}

// Grid Columns
// ------------------------------------------------------------------
@include grid-cols;


// Grid Columns with Breakpoints
// ------------------------------------------------------------------
@each $breakpoint in $bp-suffixes {
  @media (min-width: bp-value($breakpoint, breakpoint)) {
    @include grid-cols($breakpoint);
  }
}


// Full-width columns
// ------------------------------------------------------------------

.col-full {
  width: 100%;
}

@media #{$screen-xs} {
  .col-xs-full {
    width: 100%!important;
  }
}

@media #{$screen-sm-and-up} {
  .col-sm-full {
    width: 100%!important;
  }
}

@media #{$screen-md-and-up} {
  .col-md-full {
    width: 100%!important;
  }
}

@media #{$screen-lg} {
  .col-lg-full {
    width: 100%!important;
  }
}

@media #{$screen-xs} {
  .nested-full-width-xs {
    margin-left: -((bp-value(xs, outer)) - ((bp-value(xs, gutter) / 2)));
    margin-right: -((bp-value(xs, outer)) - ((bp-value(xs, gutter) / 2)));
    padding-left: bp-value(xs, outer);
    padding-right: bp-value(xs, outer);
  }
}

@media #{$screen-sm} {
  .nested-full-width-sm {
    margin-left: -((bp-value(sm, outer)) - ((bp-value(sm, gutter) / 2)));
    margin-right: -((bp-value(sm, outer)) - ((bp-value(sm, gutter) / 2)));
    padding-left: bp-value(sm, outer);
    padding-right: bp-value(sm, outer);
  }
}

@media #{$screen-md} {
  .nested-full-width-md {
    margin-left: -((bp-value(md, outer)) - ((bp-value(md, gutter) / 2)));
    margin-right: -((bp-value(md, outer)) - ((bp-value(md, gutter) / 2)));
    padding-left: bp-value(md, outer);
    padding-right: bp-value(md, outer);
  }
}

@media #{$screen-lg} {
  .nested-full-width-lg {
    margin-left: -((bp-value(lg, outer)) - ((bp-value(lg, gutter) / 2)));
    margin-right: -((bp-value(lg, outer)) - ((bp-value(lg, gutter) / 2)));
    padding-left: bp-value(lg, outer);
    padding-right: bp-value(lg, outer);
  }
}


.grid-row-overflow-right {
  margin-right: -(bp-value($suffix-first, outer) * 3);
  
  @each $breakpoint in $bp-suffixes {
    @media (min-width: bp-value($breakpoint, breakpoint)) {
      margin-right: -(#{(bp-value($breakpoint, outer) * 3)});
    }
  }
}
